[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Shiny en una sentada",
    "section": "",
    "text": "Introducción\nBienvenidos al tutorial para desarrollar un visualizador geográfico súper simple utilizando Shiny. Este taller fue desarrollado como parte de las actividades de la Semana de Divulgación de las Ciencias de Información Geoespacial 2022 de CentroGeo.\nShiny es una herramienta desarrollada por RStudio para crear de forma sencilla y usando únicamente el lenguaje de programación R. R provee paquetes de visualización y análisis estadístico muy poderosos, Shiny nos ayuda a usar las funcionalidades de R para construir tableros interactivos de visualización y análisis de forma rápida, sin recurrir directamente a tecnologías Web como Javascript o HTML.\nEl objetivo del taller es guiarte paso a paso en el desarrollo de un tablero de visualización muy simple que incluya un mapa y un par de graficos dinámicos. Vamos a trabajar cn datos del Secretariado Ejecutivo del Sistema Nacional de Seguridad Pública sobre incidencia delictiva en México. Para podr concentrarnos en este taller sólo en lo que tiene que ver con Shiny, vamos a usar una versión preprocesada de los datos abiertos.\n\n\nRequisitos previos\nAntes que nada, para seguir el taller es necesario que tengas una carpeta organizada de la siguiente forma:\nproyecto \n│   app.R    \n└───01_input\n│   │   Mapa_scatter_delitos_prioritarios.rds\n│   │   ts_delitos_prioritarios.rds\nLos datos los puedes bajar de aquí:\n\nMapa_scatter_delitos_prioritarios.rds\nts_delitos_prioritarios.rds\n\nAdemás tenemos que tener instalados, además de R (aquí encuentras las instrucciones para instalarlo), una serie de paquetes:\n\ninstall.packages(\"shiny\")\ninstall.packages(\"tidyverse\")\ninstall.packages(\"leaflet\")\n\n\n\nEstructura del taller\nUna ves que hemos cubierto los requisitos previos, podemos empezar a trabajar en nuestro visualizador. El taller está estructurado de la siguiente forma:\n\nEn la Sección Gráficas vamos a ver cómo se hacen individualmente los componentes de la aplicación:\n\nScatterplot\nSerie de tiempo\nMapa\n\nEn la sección Tablero, vamos a juntar estos elementos y programar la interactividad."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Acerca",
    "section": "",
    "text": "Noé Osorio García\nPablo López Ramírez"
  },
  {
    "objectID": "serie_tiempo.html",
    "href": "serie_tiempo.html",
    "title": "Serie de Tiempo",
    "section": "",
    "text": "Antes de empezar, cargamos los paquetes que vamos a usar:\n\nlibrary(tidyverse)\n\nLo primero que tenemos que hacer es leer los datos y fijar el encoding (para que funcionen bien los acentos).\n\nbase_ts <- read_rds(\"01_input/ts_delitos_prioritarios.rds\")\nEncoding(base_ts$subtipo_de_delito) <- \"latin1\"\nhead(base_ts)\n\n\n\n\n\nfecha\nsubtipo_de_delito\nTotal\n\n\n\n\n2015-01-01\nRobo a casa habitación\n7850\n\n\n2015-01-01\nRobo a negocio\n7352\n\n\n2015-01-01\nRobo a transeúnte\n6613\n\n\n2015-01-01\nRobo a transportista\n543\n\n\n2015-01-01\nRobo en transporte público colectivo\n1733\n\n\n2015-01-01\nRobo en transporte público individual\n140\n\n\n\n\n\n\nComo podemos ver, los datos son una serie de tiempo de los diferentes tipos de delitos en formato largo: la columna subtipo_de_delito discrimina los diferentes tipos de delito y la columna Total nos dice cuántos delitos hubo de ese tipo en cada periodo.\nPara poder aceptar el input del usuario y mostrar la serie de tiempo para el delito que seleccione, vamos anecesitar poder filtrar la serie por subtipo_de_delito:\n\nhead(base_ts %>% \n    filter(subtipo_de_delito == \"Homicidio doloso\"))\n\n\n\n\n\nfecha\nsubtipo_de_delito\nTotal\n\n\n\n\n2015-01-01\nHomicidio doloso\n1354\n\n\n2015-02-01\nHomicidio doloso\n1388\n\n\n2015-03-01\nHomicidio doloso\n1379\n\n\n2015-04-01\nHomicidio doloso\n1442\n\n\n2015-05-01\nHomicidio doloso\n1601\n\n\n2015-06-01\nHomicidio doloso\n1466\n\n\n\n\n\n\nYa con nuestro edlito de interés filtrado, podemos fácilmente hacer una gráfica de línea de la serie de tiempo:\n\nbase_ts %>%\n    filter(subtipo_de_delito == \"Homicidio doloso\") %>%\n    ggplot(aes(fecha, Total)) +\n        geom_line()\n\n\n\n\nMuy bien, ahora pongamos un punto rojo que nos indique el máximo de la serie de tiempo. Para esto lo primero que necesitamos es identificar la fecha en la que sucedió ese máximo.\n\nbase_ts %>% \n    filter(subtipo_de_delito == \"Homicidio doloso\") %>%\n    filter(Total == max(Total))\n\n\n\n\n\nfecha\nsubtipo_de_delito\nTotal\n\n\n\n\n2018-07-01\nHomicidio doloso\n3074\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nNoten cómo estamos aquí encadenando los dos filtros, uno sobre el tipo de delito y otro sobre el total.\n\n\nAhora podemos usar ese código para agregar un geom_point en el lugar donde ocurrió el máximo. El truco es poder pasar el filtro a geom_point que recibe automaticamente los datos completos (base_ts). Para eso podemos sobreescribir el parámetro data que recibe geom_point y usar la notación especial . para referirnos a lo que recibe originalmente.\n\nbase_ts %>%\n    filter(subtipo_de_delito == \"Homicidio doloso\") %>%\n    ggplot(aes(fecha, Total)) +\n    geom_line() + \n    geom_point(data=. %>% \n               filter(Total==max(Total)),\n               size=3,col=\"red\"\n    )\n\n\n\n\nAhora sólo nos falta poner otro punto en el último valor observado para permitir al usuario comparar fácilmente el valor actual con el valor máximo.\n\nbase_ts %>%\n    filter(subtipo_de_delito == \"Homicidio doloso\") %>%\n    ggplot(aes(fecha, Total)) +\n    geom_line() + \n    geom_point(data=. %>% \n               filter(Total==max(Total)),\n               size=3,col=\"red\"\n    ) +\n    geom_point(data=. %>% \n               filter(fecha==max(fecha)),\n               size=3,col=\"black\"\n    )    \n\n\n\n\nCon esto terminamos la primera de las gráficas que queremos desplegar. En la siguiente sección vamos a hacer un diagrama de dispersión."
  },
  {
    "objectID": "scatter_plot.html",
    "href": "scatter_plot.html",
    "title": "Diagrama de dispersión",
    "section": "",
    "text": "Una vez más, empezamos por cargar los paquetes que vamos a usar:\n\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(ggrepel)\n\nAhora podemos leer y explorar la base de donde vamos a sacar esta gráfica.\n\nbase_mapa <- read_rds(\"01_input/Mapa_scatter_delitos_prioritarios.rds\")\nbase_mapa <- sf::st_as_sf(base_mapa)\nEncoding(base_mapa$subtipo_de_delito) <- \"latin1\"\nEncoding(base_mapa$NOMGEO) <- \"latin1\"\nhead(base_mapa)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfecha\nsubtipo_de_delito\nclave_ent\nentidad\nTotal\nCVEGEO\nNOMGEO\ngeometry\n\n\n\n\n2022-07-01\nRobo a casa habitación\n01\nAguascalientes\n164\n01\nAguascalientes\nMULTIPOLYGON (((-102.2879 2…\n\n\n2022-07-01\nRobo a casa habitación\n02\nBaja California\n294\n02\nBaja California\nMULTIPOLYGON (((-112.3007 2…\n\n\n2022-07-01\nRobo a casa habitación\n03\nBaja California Sur\n120\n03\nBaja California Sur\nMULTIPOLYGON (((-109.8945 2…\n\n\n2022-07-01\nRobo a casa habitación\n04\nCampeche\n120\n04\nCampeche\nMULTIPOLYGON (((-91.9565 20…\n\n\n2022-07-01\nRobo a casa habitación\n05\nCoahuila de Zaragoza\n140\n05\nCoahuila de Zaragoza\nMULTIPOLYGON (((-102.3108 2…\n\n\n2022-07-01\nRobo a casa habitación\n06\nColima\n123\n06\nColima\nMULTIPOLYGON (((-114.7373 1…\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n¡Esta base de datos contiene geometrías! La columna geometry contiene las coordenadas del polígono de cada estado. En esta gráfica no las vamos a usar, pero más adelante sí, para hacer un mapa.\n\n\nEsta base es muy similar a la que usamos en la serie de tiempo, sólo que viene desagregada por entidad de la república, entonces tenemos una serie de tiempo para cada estado.\n\neje <- base_mapa %>% \n  filter(subtipo_de_delito==\"Homicidio doloso\") %>% \n  filter(Total==max(Total))\neje\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfecha\nsubtipo_de_delito\nclave_ent\nentidad\nTotal\nCVEGEO\nNOMGEO\ngeometry\n\n\n\n\n2022-07-01\nHomicidio doloso\n11\nGuanajuato\n298\n11\nGuanajuato\nMULTIPOLYGON (((-101.35 21…."
  }
]